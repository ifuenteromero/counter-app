{"version":3,"sources":["components/counter.jsx","components/counters.jsx","components/navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["Counter","props","console","log","classes","this","counter","value","className","getBadgeClasses","formatCount","onClick","onIncrement","disabled","onDelete","id","Component","Counters","counters","onReset","map","key","NavBar","totalCounters","href","App","handleReset","state","c","setState","handleDelete","counterId","filter","handleIncrement","quantity","index","indexOf","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.995cae47.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\r\n\r\nclass Counter extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        console.log('Counter- Constructor')\r\n    }\r\n    componentDidMount(){\r\n        console.log('Counter- Mounted')\r\n\r\n    }\r\n    getBadgeClasses() {\r\n        let classes = \"badge m-2 badge-\";\r\n        classes += this.props.counter.value ? 'primary' : 'warning';\r\n        return classes;\r\n    }\r\n\r\n    formatCount() {\r\n        const { value } = this.props.counter;\r\n        return value || 'Zero'\r\n    }\r\n\r\n    // formatButtonDisabled(){\r\n    //     const { value } = this.props.counter;\r\n    //     if (value===0) return disabled\r\n    // }\r\n\r\n    render () {\r\n        console.log('Counter-Rendered')\r\n\r\n        return(\r\n            <div className=\"row\">\r\n                <div className=\"col-1\">\r\n                    <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <button onClick={() => this.props.onIncrement(this.props.counter,1)} className=\"btn btn-secondary btn-sm m-2\">+</button>\r\n                    <button onClick={() => this.props.onIncrement(this.props.counter,-1)} className=\"btn btn-secondary btn-sm m-2\" disabled={this.props.counter.value===0}>-</button>\r\n                    <button onClick={() => this.props.onDelete(this.props.counter.id)} className=\"btn btn-danger btn-sm m-2\">x</button>\r\n                </div>\r\n            </div>\r\n        );  \r\n    }    \r\n}\r\n\r\nexport default Counter;\r\n","import React from 'react';\r\nimport Counter from './counter';\r\n\r\nconst Counters = ({counters,onReset,onDelete,onIncrement}) => {\r\n    return ( \r\n        <div>\r\n            <button \r\n                onClick={onReset}\r\n                className=\"btn btn-primary btn-sm m-2\">\r\n                    Reset\r\n            </button>\r\n            {counters.map(counter=> \r\n                <Counter \r\n                    counter={counter}\r\n                    key={counter.id}\r\n                    onDelete={onDelete} \r\n                    onIncrement={onIncrement}\r\n                />\r\n            )}\r\n        </div> \r\n    );\r\n}\r\n \r\nexport default Counters;","import React from 'react';\r\n\r\nconst NavBar = ({totalCounters}) => {\r\n    console.log('NavBar-render');\r\n\r\n    return ( \r\n        <nav className=\"navbar navbar-light bg-light\">\r\n            <a className=\"navbar-brand\" href=\"#\">\r\n                Navbar\r\n                <span className=\"badge badge-pill badge-secondary\">\r\n                {totalCounters }\r\n                </span>\r\n            </a>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default NavBar;","import React, { Component, Fragment } from 'react';\nimport Counters from './components/counters';\nimport NavBar from './components/navbar';\nimport './App.css';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tconsole.log('App-Constructor');\n\n\t\tthis.state = {\n\t\t\tcounters: [\n\t\t\t\t{ id: 1, value: 0 },\n\t\t\t\t{ id: 2, value: 0 },\n\t\t\t\t{ id: 3, value: 0 },\n\t\t\t\t{ id: 4, value: 0 },\n\t\t\t],\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconsole.log('App-Mounted');\n\t}\n\n\thandleReset = () => {\n\t\tconst counters = this.state.counters.map(c => {\n\t\t\treturn { ...c, value: 0 };\n\t\t});\n\t\tthis.setState({ counters });\n\t};\n\n\thandleDelete = counterId => {\n\t\tconst counters = this.state.counters.filter(\n\t\t\tcounter => counter.id !== counterId\n\t\t);\n\t\tthis.setState({ counters });\n\t};\n\n\thandleIncrement = (counter, quantity) => {\n\t\tconst counters = [...this.state.counters];\n\t\tconst index = counters.indexOf(counter);\n\t\tcounters[index] = { ...counter };\n\t\tconsole.log(counters[index]);\n\t\tcounters[index].value = counters[index].value + quantity;\n\t\tconsole.log(counters[index]);\n\t\tthis.setState({ counters });\n\t};\n\n\trender() {\n\t\tconsole.log('App-Rendered');\n\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<NavBar\n\t\t\t\t\ttotalCounters={this.state.counters.filter(c => c.value).length}\n\t\t\t\t/>\n\t\t\t\t<main className=\"container\">\n\t\t\t\t\t<Counters\n\t\t\t\t\t\tonReset={this.handleReset}\n\t\t\t\t\t\tonIncrement={this.handleIncrement}\n\t\t\t\t\t\tonDelete={this.handleDelete}\n\t\t\t\t\t\tcounters={this.state.counters}\n\t\t\t\t\t/>\n\t\t\t\t</main>\n\t\t\t</Fragment>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}